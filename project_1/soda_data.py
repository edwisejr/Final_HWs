## These little "#%%" marks make this py file that functions like a jupyter notebook in vs code.
## I commented out lines that work with my databases
#%% Change working directory from the workspace root to the ipynb file location. Turn this addition off with the DataSciece.changeDirOnImportExport setting
import os
try:
	os.chdir(os.path.join(os.getcwd(), '..\..\Documents\Python Scripts\project1'))
	print(os.getcwd())
except:
	pass

#%%
# import os
# import pandas as pd
# import numpy as np
# from sodapy import Socrata
# import json
# import pprint

# # #%%
# ##addresses data
# # socrata_domain = 'datacatalog.cookcountyil.gov'
# # socrata_dataset_identifier = '5k9t-gkj8'

# # # App Tokens can be generated by creating an account at https://opendata.socrata.com/signup
# # # Tokens are optional (`None` can be used instead), though requests will be rate limited.
# # #
# # # If you choose to use a token, run the following command on the terminal (or add it to your .bashrc)
# # # $ export SODAPY_APPTOKEN=<token>
# # socrata_token = os.environ.get("")
# # client = Socrata(socrata_domain, socrata_token)
# # #print("Domain: {domain:}\nSession: {session:}\nURI Prefix: {uri_prefix:}".format(**client.__dict__))
# # results = client.get(socrata_dataset_identifier, limit=6)
# # pprint(results)



# #%%
# socrata_domain = 'datacatalog.cookcountyil.gov'
# socrata_dataset_identifier = 'xt6g-tawy'
# # App Tokens can be generated by creating an account at https://opendata.socrata.com/signup
# # Tokens are optional (`None` can be used instead), though requests will be rate limited.
# #
# # If you choose to use a token, run the following command on the terminal (or add it to your .bashrc)
# # $ export SODAPY_APPTOKEN=<token>
# socrata_token = os.environ.get("")
# client = Socrata(socrata_domain, socrata_token)
# #print("Domain: {domain:}\nSession: {session:}\nURI Prefix: {uri_prefix:}".format(**client.__dict__))
# results = client.get(socrata_dataset_identifier, limit=100000,tax_year=2013)
# results_df = pd.DataFrame.from_records(results)
# results_df.head()

# #%%
# import pymongo
# #app = Flask(__name__)
# DB_NAME = 'chicago_taxes'
# DB_HOST = 'ds045087.mlab.com'
# DB_PORT =  45087
# connection = pymongo.MongoClient(DB_HOST, DB_PORT)
# db = connection[DB_NAME]
# db.authenticate(DB_USER, DB_PASS)


# #%%
# results = json.loads(results_df.T.to_json()).values()
# db.ingest_agency.insert_many(results)


#%%
# import pymongo
# from sqlalchemy import create_engine
# import pyodbc
# import pandas as pd
# DB_NAME = 'chicago_taxes'
# DB_HOST = 'ds045087.mlab.com'
# DB_PORT =  45087
# connection = pymongo.MongoClient(DB_HOST, DB_PORT)
# db = connection[DB_NAME]
# db.authenticate(DB_USER, DB_PASS)

# cstr = "mssql+pyodbc://*******/StageB?driver=ODBC+Driver+13+for+SQL+Server"
# engine =  create_engine(cstr)
# TAX_AGENCY_df = TAX_AGENCY_df.head(500)
# i = 0
# for i in range(len(TAX_AGENCY_df)):
#     TAX_AGENCY_entry = pd.DataFrame(TAX_AGENCY_df.iloc[[i]])
#     TAX_AGENCY_entry.to_sql('TAX_AGENCY_CHI_2013', con=engine, index=False, if_exists='append')
#     i+=1


#%%
# import json
# with open('gis_elem.geojson') as f:
#     data  = json.load(f)
# etyp=[]
# eagency=[]
# eagency_des=[]
# ecoordinates =[]
# for i in data['features']:
#     eagency.append(i['properties']['agency'])
#     eagency_des.append(i['properties']['agency_des'])
#     etyp.append(i['type'])
# egis_school= pd.DataFrame(
#     { 'agency': eagency,
#         'agency_des': eagency_des,
#      'type': etyp,
#      'level': 'elem'
#     })
# egis_school_table = egis_school[['agency','agency_des','level']]
# egis_school_table
# cstr = "mssql+pyodbc://*******/StageB?driver=ODBC+Driver+13+for+SQL+Server"
# engine =  create_engine(cstr)
# i = 0
# for i in range(len(egis_school_table)):
#     gis_school_table_entry = pd.DataFrame(egis_school_table.iloc[[i]])
#     gis_school_table_entry.to_sql('gis_school', con=engine, index=False, if_exists='append')
#     i+=1

#%%
# pull in all of the final data
import csv
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import numpy as np
import requests
import time
import seaborn as sns
import statsmodels.formula.api as sm
import datetime
from numpy.polynomial import polynomial as P
from numpy import arange,array,ones
from scipy import stats
now = datetime.datetime.now()
pd.set_option('display.max_columns', 500)
pd.set_option('display.max_rows', 10000)
df = pd.read_csv('rc13_V3.csv')
file1 =pd.DataFrame(df)
file1 = file1[[\
'SCHOOL - WHITE %', \
'SCHOOL - BLACK %', \
'SCHOOL - HISPANIC %', \
'SCHOOL - ASIAN %', \
'SCHOOL - NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER %', \
'SCHOOL - NATIVE AMERICAN %', \
'SCHOOL - TWO OR MORE RACES %', \
'SCHOOL TOTAL ENROLLMENT', \
'ATTENDANCE RATE SCHOOL %', \
'ATTENDANCE RATE SUBREGION %', \
'ATTENDANCE RATE DISTRICT %', \
'ATTENDANCE RATE STATE %', \
'ATTENDANCE RATE SCHOOL %', \
'ATTENDANCE RATE SUBREGION %', \
'ATTENDANCE RATE DISTRICT %', \
'ATTENDANCE RATE STATE %', \
'HS 4-YEAR GRAD RATE SCHOOL %', \
'HS 4-YEAR GRAD RATE SUBREGION %', \
'HS 4-YEAR GRAD RATE DISTRICT %', \
'HS 4-YEAR GRAD RATE STATE % ', \
'OVERALL AVERAGE CLASS SIZE - SCHOOL', \
'% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(SCHOOL)', \
'% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(SUBREG)', \
'% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(DISTRICT)', \
'% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(STATE)', \
'% CLS NOT TAUGHT BY HIGHLY QUALIFIED TCHRS(DISTRICT HIGH POVERTY)', \
'% CLS NOT TAUGHT BY HIGHLY QUALIFIED TCHRS(DISTRICT LOW POVERTY)', \
'% CLS NOT TAUGHT BY HIGHLY QUALIFIED TCHRS(STATE HIGH POVERTY)', \
'% CLS NOT TAUGHT BY HIGHLY QUALIFIED TCHRS(STATE LOW POVERTY)', \
'LOCAL PROPERTY TAXES - DISTRICT DOLLAR', \
'LOCAL PROPERTY TAXES - DISTRICT %', \
'LOCAL PROPERTY TAXES - STATE %', \
'OTHER LOCAL FUNDING - DISTRICT DOLLAR', \
'OTHER LOCAL FUNDING - DISTRICT %', \
'OTHER LOCAL FUNDING - STATE %', \
'GENERAL STATE AID - DISTRICT DOLLAR', \
'GENERAL STATE AID - DISTRICT %', \
'GENERAL STATE AID - STATE %', \
'OTHER STATE FUNDING - DISTRICT DOLLAR', \
'OTHER STATE FUNDING - DISTRICT %', \
'OTHER STATE FUNDING - STATE %', \
'FEDERAL FUNDING - DISTRICT DOLLAR', \
'FEDERAL FUNDING - DISTRICT %', \
'FEDERAL FUNDING - STATE %', \
'TOTAL REVENUE SOURCE', \
'EAV PER PUPIL  DISTRICT', \
'EAV PER PUPIL  ALL(DIST TYPE)', \
'EAV PER PUPIL  ALL(DIST SIZE)', \
'TOT SCHL TAX RATE PER $100  DISTRICT', \
'TOT SCHL TAX RATE PER $100  ALL(DIST TYPE)', \
'TOT SCHL TAX RATE PER $100  ALL(DIST SIZE)', \
'INSTRUCT EXPEND PER PUPIL  DISTRICT', \
'INSTRUCT EXPEND PER PUPIL  STATE', \
'INSTRUCT EXPEND PER PUPIL  ALL(DIST TYPE)', \
'INSTRUCT EXPEND PER PUPIL  ALL(DIST SIZE)', \
'OPER EXPEND PP - DISTRICT', \
'OPER EXPEND PP - STATE', \
'OPER EXPEND PP - ALL(DIST TYPE)', \
'OPER EXPEND PP - ALL(DIST SIZE)', \
'INSTRUCTION  -  DOLLARS', \
'INSTRUCTION  -  DISTRICT %', \
'INSTRUCTION  -  STATE %', \
'GENERAL ADMIN  -  DOLLARS', \
'GENERAL ADMIN  -  DISTRICT %', \
'GENERAL ADMIN  -  STATE %', \
'SUPPORTING SERVICES  -  DOLLARS', \
'SUPPORTING SERVICES  -  DISTRICT %', \
'SUPPORTING SERVICES  -  STATE %', \
'OTHER EXPENDITURES  -  DOLLARS', \
'OTHER EXPENDITURES  -  DISTRICT %', \
'OTHER EXPENDITURES  -  STATE %', \
'EDUCATION FUND - DOLLARS', \
'EDUCATION FUND - DISTRICT %', \
'EDUCATION FUND - STATE %', \
'OPERATIONS/B/M - DOLLARS', \
'OPERATIONS/B/M - DISTRICT %', \
'OPERATIONS/B/M - STATE %', \
'TRANSPORTATION - DOLLARS', \
'TRANSPORTATION - DISTRICT %', \
'TRANSPORTATION - STATE %', \
'DEBT SERVICE - DOLLARS', \
'DEBT SERVICE - DISTRICT %', \
'DEBT SERVICE - STATE %', \
'TORT - DOLLARS', \
'TORT - DISTRICT %', \
'TORT - STATE %', \
'MUNIC. RET./SOC. SECURITY - DOLLARS', \
'MUNIC. RET./SOC. SECURITY - DISTRICT %', \
'MUNIC. RET./SOC. SECURITY  - STATE %', \
'FIRE PREV. & SAFETY- DOLLARS', \
'FIRE PREV. & SAFETY - DISTRICT %', \
'FIRE PREV. & SAFETY- STATE %', \
'CAPITAL PROJECTS FUND - DOLLARS', \
'CAPITAL PROJECTS FUND - DISTRICT %', \
'CAPITAL PROJECTS FUND - STATE %', \
'TOTAL EXPENDITURES', \
'TOTAL SCHOOL ENROLLMENT IN READING FOR GRADE 3-8, AND 11', \
'TOTAL SUBREGION ENROLLMENT IN READING FOR GRADE 3-8, AND 11', \
'TOTAL DISTRICT ENROLLMENT IN READING FOR GRADE 3-8, AND 11', \
'TOTAL STATE ENROLLMENT IN READING FOR GRADE 3-8, AND 11', \
'% OF STUDENTS NOT TAKING READING TESTS (SCHOOL) ', \
'% OF STUDENTS NOT TAKING READING TESTS (SUBREGION) ', \
'% OF STUDENTS NOT TAKING READING TESTS (DISTRICT) ', \
'% OF STUDENTS NOT TAKING READING TESTS (STATE) ', \
'2012 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math)', \
'2012 SUBREGION COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2012 DISTRICT COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2012 STATE COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math)', \
'2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 SUBREGION COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 DISTRICT COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 STATE COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2012 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math)', \
'2012 SUBREGION COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2012 DISTRICT COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2012 STATE COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math)', \
'2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 SUBREGION COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 DISTRICT COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 STATE COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2012 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math)', \
'2012 SUBREGION COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2012 DISTRICT COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2012 STATE COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math)', \
'2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 SUBREGION COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 DISTRICT COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 STATE COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2012 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math)', \
'2012 SUBREGION COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2012 DISTRICT COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2012 STATE COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math)', \
'2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 SUBREGION COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 DISTRICT COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'2013 STATE COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ', \
'SCHOOL READING COMPOSITE PERCENT FOR MEETS & EXCEEDS ', \
'DISTRICT READING COMPOSITE PERCENT FOR MEETS & EXCEEDS ', \
'STATE READING COMPOSITE PERCENT FOR MEETS & EXCEEDS ', \
'SCHOOL MATH COMPOSITE PERCENT FOR MEETS & EXCEEDS ', \
'DISTRICT MATH COMPOSITE PERCENT FOR MEETS & EXCEEDS ', \
'STATE MATH COMPOSITE PERCENT FOR MEETS & EXCEEDS ', \
'SCHOOL READING PERCENT FOR MEETS & EXCEEDS - SAFE HARBOR ', \
'DISTRICT READING PERCENT FOR MEETS & EXCEEDS - SAFE HARBOR', \
'STATE READING PERCENT FOR MEETS & EXCEEDS - SAFE HARBOR', \
'SCHOOL MATH PERCENT FOR MEETS & EXCEEDS - SAFE HARBOR', \
'DISTRICT MATH PERCENT FOR MEETS & EXCEEDS - SAFE HARBOR', \
'STATE MATH PERCENT FOR MEETS & EXCEEDS - SAFE HARBOR', \
'AVERAGE READING GROWTH VALUE - SCHOOL', \
'AVERAGE READING GROWTH VALUE - DISTRICT', \
'AVERAGE READING GROWTH VALUE - STATE', \
'AVERAGE MATH GROWTH VALUE - SCHOOL', \
'AVERAGE MATH GROWTH VALUE - DISTRICT', \
'AVERAGE MATH GROWTH VALUE - STATE' \
]].apply(pd.to_numeric, errors = 'coerce')
file1.fillna(0)

#%%
################################################################################
# i ran thorugh a lot of charts looking for a story. the story starts at line 530
#################################################################################
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
file1 = file1[file1['% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(SCHOOL)'] >0]
x = file1['SCHOOL - WHITE %']
#x = pd.to_numeric(x, errors='coerce')
y = file1['% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(SCHOOL)']
#y = pd.to_numeric(y, errors='coerce')
plt.ylabel('% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(SCHOOL)')
plt.xlabel('SCHOOL - WHITE %')
plt.ylim(0,30)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White % and Non Qualified Teachers'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()


#%%
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
x = file1['SCHOOL - WHITE %']
#x = pd.to_numeric(x, errors='coerce')
y = file1['HS 4-YEAR GRAD RATE SCHOOL %']
#y = pd.to_numeric(y, errors='coerce')
plt.ylabel('HS 4-YEAR GRAD RATE SCHOOL %')
plt.xlabel('SCHOOL - WHITE %')
plt.ylim(0,100)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White% and Grad Rate'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()


#%%
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
x = file1['SCHOOL - WHITE %']
x = pd.to_numeric(x, errors='coerce')
y = file1['LOCAL PROPERTY TAXES - DISTRICT DOLLAR']
y = pd.to_numeric(y, errors='coerce')
y = y/100000
plt.ylabel('LOCAL PROPERTY TAXES - DISTRICT DOLLAR')
plt.xlabel('SCHOOL - WHITE %')
#plt.ylim(0,.5)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White% and district dollar'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()


#%%
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
x = file1['SCHOOL - WHITE %']
x = pd.to_numeric(x, errors='coerce')
y = file1['LOCAL PROPERTY TAXES - DISTRICT %']
y = pd.to_numeric(y, errors='coerce')
y = y/100000
plt.ylabel('LOCAL PROPERTY TAXES - DISTRICT %')
plt.xlabel('SCHOOL - WHITE %')
#plt.ylim(0,.5)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White% and district dollar'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()


#%%
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
x = file1['SCHOOL - WHITE %']
x = pd.to_numeric(x, errors='coerce')
y = file1['FEDERAL FUNDING - DISTRICT %']
y = pd.to_numeric(y, errors='coerce')
y = y/100000
plt.ylabel('FEDERAL FUNDING - DISTRICT %')
plt.xlabel('SCHOOL - WHITE %')
#plt.ylim(0,.5)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White% and district dollar'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()

#%%
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
x = file1['SCHOOL - WHITE %']
x = pd.to_numeric(x, errors='coerce')
y = file1['TOTAL REVENUE SOURCE']
y = pd.to_numeric(y, errors='coerce')
y = y/100000
plt.ylabel('TOTAL REVENUE SOURCE')
plt.xlabel('SCHOOL - WHITE %')
#plt.ylim(0,.5)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White% and district dollar'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()

#%%
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
x = file1['SCHOOL - WHITE %']
x = pd.to_numeric(x, errors='coerce')
y = file1['2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ']
y = pd.to_numeric(y, errors='coerce')
y = y/100000
plt.ylabel('2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ')
plt.xlabel('SCHOOL - WHITE %')
#plt.ylim(0,.5)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White% and district dollar'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()

#%%
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
x = file1['TOTAL REVENUE SOURCE']
x = pd.to_numeric(x, errors='coerce')
y = file1['2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ']
y = pd.to_numeric(y, errors='coerce')
y = y/100000
plt.ylabel('2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ')
plt.xlabel('TOTAL REVENUE SOURCE')
#plt.ylim(0,.5)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White% and district dollar'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()


#%%
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
x = file1['OVERALL AVERAGE CLASS SIZE - SCHOOL']
x = pd.to_numeric(x, errors='coerce')
y = file1['2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ']
y = pd.to_numeric(y, errors='coerce')
y = y/100000
plt.ylabel('2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ')
plt.xlabel('OVERALL AVERAGE CLASS SIZE - SCHOOL')
#plt.ylim(0,.5)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White% and district dollar'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()

#%%
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
x = file1['FEDERAL FUNDING - DISTRICT %']
x = pd.to_numeric(x, errors='coerce')
y = file1['2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ']
y = pd.to_numeric(y, errors='coerce')
y = y
plt.ylabel('2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ')
plt.xlabel('FEDERAL FUNDING - DISTRICT %')
#plt.ylim(0,.5)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White% and district dollar'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()

#%%
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
x = file1['LOCAL PROPERTY TAXES - DISTRICT %']
x = pd.to_numeric(x, errors='coerce')
y = file1['2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ']
y = pd.to_numeric(y, errors='coerce')
y = y
plt.ylabel('2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ')
plt.xlabel('LOCAL PROPERTY TAXES - DISTRICT %')
#plt.ylim(0,.5)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White% and district dollar'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()


#%%
figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
x = file1['% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(SCHOOL)']
x = pd.to_numeric(x, errors='coerce')
y = file1['2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ']
y = pd.to_numeric(y, errors='coerce')
y = y
plt.ylabel('2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ')
plt.xlabel('% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(SCHOOL)')
#plt.ylim(0,.5)
fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
plt.plot(x, y, 'yo', x, fit_fn(x), 'b')
plt.title('White% and district dollar'+str(now.strftime("%Y-%m-%d %H:%M"))+')', {'fontsize': 12,
  'fontweight' :1})
plt.show()

#%%
#figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
# plt.ylabel('2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ')
# plt.xlabel('GENERAL ADMIN  -  DOLLARS')
test = sns.jointplot(x='GENERAL ADMIN  -  DOLLARS', y='LOCAL PROPERTY TAXES - DISTRICT %', data=file1, kind ="reg")
#plt.show()
test.savefig("output.png")


#%%
#figure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')
# plt.ylabel('2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ')
# plt.xlabel('GENERAL ADMIN  -  DOLLARS')
file1['GENERAL ADMIN  -  DOLLARS']  = pd.to_numeric(file1['GENERAL ADMIN  -  DOLLARS'] , errors='coerce')
file1['% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(SCHOOL)'] = pd.to_numeric(file1['% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(SCHOOL)'], errors='coerce')
test = sns.jointplot(x='GENERAL ADMIN  -  DOLLARS', y='% CLASSES NOT TAUGHT BY HIGHLY QUALIFIED TEACHERS(SCHOOL)', data=file1, kind ="reg")
#plt.show()
test.savefig("output2.png")






#%%
import pandas as pd
##creating 4 dataframes. 1 for all data. 1 chicago 1 non-chicago 1 for all data grouped by district
df = pd.read_csv('rc13_V3.csv')
file1 =pd.DataFrame(df)
file1['SCHOOL NAME'] = file1['SCHOOL NAME'].str.strip()
file1['DISTRICT NAME'] = file1['DISTRICT NAME'].str.strip()
ALL_SCHOOLS = file1
CPS_DATA = file1[file1['DISTRICT NAME']=='City of Chicago SD 299']
NON_CPS_DATA = file1[file1['DISTRICT NAME']!='City of Chicago SD 299']



#%%
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
figure(num=None, figsize=(4, 4), dpi=80, facecolor='w', edgecolor='k')
df = ALL_SCHOOLS[['EAV PER PUPIL  DISTRICT','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"EAV PER PUPIL  DISTRICT": "x", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "y"})
df['x'] = pd.to_numeric(df['x'], errors='coerce')
df['x'] = df['x'] /100000
df['y'] = pd.to_numeric(df['y'], errors='coerce')
groups = df.groupby('DISTRICT NAME')
plt.ylabel('% Meets & Exceeds(Read and Math)',fontsize=10)
plt.xlabel('EAV per Student (Measure of Tax Base)x100000',fontsize=8)
plt.title('Tax Base and Test Performance by District', {'fontsize': 12,
  'fontweight' :1})
for name, group in groups:
    plt.plot(group.x, group.y, marker = 'o', linestyle ='',ms=4,label = name)
plt.tight_layout()
plt.savefig('eav_test.png')

#%%
import seaborn as sns
df = NON_CPS_DATA[['EAV PER PUPIL  DISTRICT','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"EAV PER PUPIL  DISTRICT": "EAV PER PUPIL", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "% Meets & Exceeds(Read and Math)"})
df['EAV PER PUPIL'] = pd.to_numeric(df['EAV PER PUPIL'], errors='coerce')
df['EAV PER PUPIL'] = df['EAV PER PUPIL'] /100000
df['% Meets & Exceeds(Read and Math)'] = pd.to_numeric(df['% Meets & Exceeds(Read and Math)'], errors='coerce')
plt.ylabel('% Meets & Exceeds(Read and Math)%',fontsize=10)
plt.xlabel('EAV per Student (Measure of Tax Base)x100000',fontsize=8)
plt.title('Tax Base and Test Performance by District', {'fontsize': 12,
  'fontweight' :1})
test = sns.jointplot(x='EAV PER PUPIL', y='% Meets & Exceeds(Read and Math)', data=df, kind ="reg")
#plt.show()
test.savefig("eavjoint.png")


#%%
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
figure(num=None, figsize=(4, 4), dpi=80, facecolor='w', edgecolor='k')
df = ALL_SCHOOLS[['LOCAL PROPERTY TAXES - DISTRICT %','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"LOCAL PROPERTY TAXES - DISTRICT %": "x", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "y"})
df['x'] = pd.to_numeric(df['x'], errors='coerce')
df['y'] = pd.to_numeric(df['y'], errors='coerce')
groups = df.groupby('DISTRICT NAME')
plt.ylabel('% Meets & Exceeds(Read and Math)',fontsize=10)
plt.xlabel('DISTRICT FUNDING FROM PROPERTY TAX%',fontsize=8)
plt.title('Local Property Tax & Test Performance', {'fontsize': 12,
  'fontweight' :1})
for name, group in groups:
    plt.plot(group.x, group.y, marker = 'o', linestyle ='',ms=4,label = name)
plt.tight_layout()
#plt.show()
plt.savefig('local_test.png')

#%%
import seaborn as sns
df = NON_CPS_DATA[['LOCAL PROPERTY TAXES - DISTRICT %','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"LOCAL PROPERTY TAXES - DISTRICT %": "LOCAL PROPERTY TAXES", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "% Meets & Exceeds(Read and Math)"})
df['LOCAL PROPERTY TAXES'] = pd.to_numeric(df['LOCAL PROPERTY TAXES'], errors='coerce')
df['% Meets & Exceeds(Read and Math)'] = pd.to_numeric(df['% Meets & Exceeds(Read and Math)'], errors='coerce')
plt.ylabel('% Meets & Exceeds(Read and Math)%',fontsize=10)
plt.xlabel('% of Funding From Local Property Taxes',fontsize=8)
plt.title('Funding from Property Tax and Test Performance by District', {'fontsize': 12,
  'fontweight' :1})
test = sns.jointplot(x='LOCAL PROPERTY TAXES', y='% Meets & Exceeds(Read and Math)', data=df, kind ="reg")
#plt.show()
test.savefig("localjoint.png")

#%%
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
figure(num=None, figsize=(4, 4), dpi=80, facecolor='w', edgecolor='k')
df = ALL_SCHOOLS[['INSTRUCTION  -  DISTRICT %','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"INSTRUCTION  -  DISTRICT %": "x", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "y"})
df['x'] = pd.to_numeric(df['x'], errors='coerce')
df['y'] = pd.to_numeric(df['y'], errors='coerce')
groups = df.groupby('DISTRICT NAME')
plt.ylabel('% Meets & Exceeds(Read and Math)',fontsize=10)
plt.xlabel('% of District Funding Spent on Instruction',fontsize=8)
plt.title('Instruction Allocation & Test Performance', {'fontsize': 12,
  'fontweight' :1})
for name, group in groups:
    plt.plot(group.x, group.y, marker = 'o', linestyle ='',ms=4,label = name)
plt.tight_layout()
#plt.show()
plt.savefig('instr_test.png')

#%%
import seaborn as sns
df = NON_CPS_DATA[['INSTRUCTION  -  DISTRICT %','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"INSTRUCTION  -  DISTRICT %": "INSTRUCTION  -  DISTRICT %", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "% Meets & Exceeds(Read and Math)"})
df['INSTRUCTION  -  DISTRICT %'] = pd.to_numeric(df['INSTRUCTION  -  DISTRICT %'], errors='coerce')
df['% Meets & Exceeds(Read and Math)'] = pd.to_numeric(df['% Meets & Exceeds(Read and Math)'], errors='coerce')
plt.ylabel('% Meets & Exceeds(Read and Math)%',fontsize=10)
plt.xlabel('% of Funding From Local Property Taxes',fontsize=8)
plt.title('Instruction Allocation and Test Performance by District', {'fontsize': 12,
  'fontweight' :1})
test = sns.jointplot(x='INSTRUCTION  -  DISTRICT %', y='% Meets & Exceeds(Read and Math)', data=df, kind ="kde")

#plt.show()
test.savefig("instrjoint.png")


#%%
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
figure(num=None, figsize=(4, 4), dpi=80, facecolor='w', edgecolor='k')
df = ALL_SCHOOLS[['GENERAL ADMIN  -  DISTRICT %','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"GENERAL ADMIN  -  DISTRICT %": "x", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "y"})
df['x'] = pd.to_numeric(df['x'], errors='coerce')
df['y'] = pd.to_numeric(df['y'], errors='coerce')
groups = df.groupby('DISTRICT NAME')
plt.ylabel('% Meets & Exceeds(Read and Math)',fontsize=10)
plt.xlabel('% of District Funding Spent on Administration',fontsize=8)
plt.title('Administration Allocation & Test Performance', {'fontsize': 12,
  'fontweight' :1})
for name, group in groups:
    plt.plot(group.x, group.y, marker = 'o', linestyle ='',ms=4,label = name)
plt.tight_layout()
plt.xlim(0,30)

#plt.show()
plt.savefig('adm_test.png')


#%%
import seaborn as sns
df = NON_CPS_DATA[['GENERAL ADMIN  -  DISTRICT %','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"GENERAL ADMIN  -  DISTRICT %": "GENERAL ADMIN  -  DISTRICT %", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "% Meets & Exceeds(Read and Math)"})
df['GENERAL ADMIN  -  DISTRICT %'] = pd.to_numeric(df['GENERAL ADMIN  -  DISTRICT %'], errors='coerce')
df['% Meets & Exceeds(Read and Math)'] = pd.to_numeric(df['% Meets & Exceeds(Read and Math)'], errors='coerce')
plt.ylabel('% Meets & Exceeds(Read and Math)%',fontsize=10)
plt.xlabel('GENERAL ADMIN  -  DISTRICT %',fontsize=8)
plt.title('Administrative Allocation and Test Performance by District', {'fontsize': 12,
  'fontweight' :1})
test = sns.jointplot(x='GENERAL ADMIN  -  DISTRICT %', y='% Meets & Exceeds(Read and Math)', data=df, kind ="reg")
plt.xlim(0,30)
#plt.show()
test.savefig("admjoint.png")

#%%
import seaborn as sns
df = NON_CPS_DATA[['GENERAL ADMIN  -  DISTRICT %','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"GENERAL ADMIN  -  DISTRICT %": "GENERAL ADMIN  -  DISTRICT %", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "% Meets & Exceeds(Read and Math)"})
df['GENERAL ADMIN  -  DISTRICT %'] = pd.to_numeric(df['GENERAL ADMIN  -  DISTRICT %'], errors='coerce')
df['% Meets & Exceeds(Read and Math)'] = pd.to_numeric(df['% Meets & Exceeds(Read and Math)'], errors='coerce')
df = df.dropna(subset=['% Meets & Exceeds(Read and Math)'])
df['% Meets & Exceeds(Read and Math)'] = df['% Meets & Exceeds(Read and Math)'].astype(int)
x =df['% Meets & Exceeds(Read and Math)']
#sns.distplot(x)
# #plt.show()
test=sns.distplot(x)
fig = test.get_figure()
fig.savefig("noncps.png") 


#%%
import seaborn as sns
df = CPS_DATA[['GENERAL ADMIN  -  DISTRICT %','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"GENERAL ADMIN  -  DISTRICT %": "GENERAL ADMIN  -  DISTRICT %", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "% Meets & Exceeds(Read and Math)"})
df['GENERAL ADMIN  -  DISTRICT %'] = pd.to_numeric(df['GENERAL ADMIN  -  DISTRICT %'], errors='coerce')
df['% Meets & Exceeds(Read and Math)'] = pd.to_numeric(df['% Meets & Exceeds(Read and Math)'], errors='coerce')
df = df.dropna(subset=['% Meets & Exceeds(Read and Math)'])
df['% Meets & Exceeds(Read and Math)'] = df['% Meets & Exceeds(Read and Math)'].astype(int)
x =df['% Meets & Exceeds(Read and Math)']
test=sns.distplot(x)
fig = test.get_figure()
fig.savefig("cps.png") 


#%%
from scipy import stats
df = CPS_DATA[['GENERAL ADMIN  -  DISTRICT %','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"GENERAL ADMIN  -  DISTRICT %": "GENERAL ADMIN  -  DISTRICT %", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "% Meets & Exceeds(Read and Math)"})
df['% Meets & Exceeds(Read and Math)'] = pd.to_numeric(df['% Meets & Exceeds(Read and Math)'], errors='coerce')
df = df.dropna(subset=['% Meets & Exceeds(Read and Math)'])
df['% Meets & Exceeds(Read and Math)'] = df['% Meets & Exceeds(Read and Math)'].astype(int)
CPS =df['% Meets & Exceeds(Read and Math)']
df = NON_CPS_DATA[['GENERAL ADMIN  -  DISTRICT %','2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ','DISTRICT NAME']]
df = df.rename(columns={"GENERAL ADMIN  -  DISTRICT %": "GENERAL ADMIN  -  DISTRICT %", "2013 SCHOOL COMPOSITE PERCENT FOR MEETS & EXCEEDS(read and math) ": "% Meets & Exceeds(Read and Math)"})
df['GENERAL ADMIN  -  DISTRICT %'] = pd.to_numeric(df['GENERAL ADMIN  -  DISTRICT %'], errors='coerce')
df['% Meets & Exceeds(Read and Math)'] = pd.to_numeric(df['% Meets & Exceeds(Read and Math)'], errors='coerce')
df = df.dropna(subset=['% Meets & Exceeds(Read and Math)'])
df['% Meets & Exceeds(Read and Math)'] = df['% Meets & Exceeds(Read and Math)'].astype(int)
non_CPS =df['% Meets & Exceeds(Read and Math)']
(t_stat, p) = stats.ttest_ind(CPS, non_CPS, equal_var=False)
p